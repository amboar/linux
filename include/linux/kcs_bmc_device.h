/* SPDX-License-Identifier: GPL-2.0 */
/* Copyright (c) 2021, IBM Corp. */

#ifndef __KCS_BMC_DEVICE_H__
#define __KCS_BMC_DEVICE_H__

#include <linux/irqreturn.h>
#include <linux/kcs_bmc.h>

/**
 * struct kcs_bmc_device_ops - Callbacks operating on a KCS device
 * @irq_mask_update: Update the set of events of interest
 * @io_inputb: A callback to read the specified KCS register from hardware
 * @io_outputb: A callback to write the specified KCS register to hardware
 * @io_updateb: A callback to update a subfield of the specified KCS register
 */
struct kcs_bmc_device_ops {
	void (*irq_mask_update)(struct kcs_bmc_device *kcs_bmc, u8 mask, u8 enable);
	u8 (*io_inputb)(struct kcs_bmc_device *kcs_bmc, u32 reg);
	void (*io_outputb)(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 b);
	void (*io_updateb)(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 mask, u8 b);
};

/**
 * kcs_bmc_handle_event() - Notify the active client of a hardware interrupt
 * @kcs_bmc: The device instance whose interrupt was triggered
 *
 * Propagate a hardware interrupt as an event to the active client. The client's
 * handler should take any necessary actions for the protocol it implements, but
 * must read IDR to resolve the interrupt if the interrupt was generated by the
 * KCS device.
 *
 * Context: Interrupt context. Takes and releases &kcs_bmc_device.lock.
 *
 * Return: An irqreturn_t value indicating whether the interrupt was handled.
 */
irqreturn_t kcs_bmc_handle_event(struct kcs_bmc_device *kcs_bmc);

/**
 * kcs_bmc_add_device() - Register a KCS device instance with the KCS subsystem
 * @dev: The &struct kcs_bmc_device instance to register
 *
 * Should be called by the probe() implementation of the KCS hardware's driver.
 *
 * Context: Process context. Takes and releases the internal KCS subsystem mutex.
 *
 * Return: 0 on success, or a negative errno on failure.
 */
int kcs_bmc_add_device(struct kcs_bmc_device *dev);

/**
 * kcs_bmc_remove_device() - Unregister a KCS device instance with the KCS subsystem
 * @dev: The &struct kcs_bmc_device instance to unregister
 *
 * Should be called by the remove() implementation of the KCS hardware's driver.
 *
 * Context: Process context. Takes and releases the internal KCS subsystem mutex.
 */
void kcs_bmc_remove_device(struct kcs_bmc_device *dev);

#endif
